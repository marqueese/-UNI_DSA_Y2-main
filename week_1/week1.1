#2. Implement a Stack using an Array/List:

class Stack:

    def __init__(self):
        self.data = []
        self.top = -1
        self.max_size = 5

    def push(self, newData):
        #self.data.append(newData)
        print("Push the data " + str(newData))
        if self.top == self.max_size - 1:
        #When the stack is full
            raise OverflowError("Cannot insert into a full stack.")
        self.top += 1
        self.data.insert(self.top, newData)
        print("Now the top index is " + str(self.top))


    def pop(self):
        #return self.data.pop()
        if self.top == -1:
        #When the stack is empty
            raise IndexError("Cannot delete from an empty stack.")
        removed = self.data[self.top]
        del self.data[self.top]
        self.top -= 1
        print("Pop the data " + str(removed))
        return removed
    

    def peek(self):
        #if not self.is_empty():
        # return self.data[len(self.data) - 1]
        if self.top == -1:
        #When the stack is empty
            raise IndexError("Cannot peek from an empty stack.")
        print("Peek the top")
        return self.data[self.top]
    

    def length(self):
        #return len(self.data)
        return self.top + 1
    

    def print_message(self):
        print("The stack size is " + str(self.length()) + " The top element is " +
        str(self.peek()))


    def print_all(self):
        #print(self.data)
        while self.top != -1:
            print(self.pop())

#3. Design an algorithm to reverse a Queue using Stacks and Queues. (Example: Convert Queue “12345” into Queue “54321”.)
    def reverse(self):
        print("\nBefore reverse, the queue is ", self.data)
        stack = Stack()
        while self.length() > 0:
            element = self.dequeue()
        stack.push(element)
        while stack.length() > 0:
            element = stack.pop()
        self.enqueue(element)
        print("\nThe reversed queue is ",)


class Queue:

    def reverse(self):
        print("\nBefore reverse, the queue is ", self.data)
        stack = Stack()
        while self.length() > 0:
            element = self.dequeue()
        stack.push(element)
        while stack.length() > 0:
            element = stack.pop()
        self.enqueue(element)
        print("\nThe reversed queue is ",)


def main():

    s = Stack()

    for i in range(1,9):
        s.push(i)
    s.print_message()
    for i in range(1,4):
        s.pop()
    s.print_message()
    s.print_all()

def reversal():
    q2 = Queue()
    for i in range(0,5):
        q2.enqueue(i)
    q2.reverse()

def options():

    print("1: Create your stack and watch it break \n" \
          "2: Reverse the stack")
    choice = int(input("Make your choice: "))

    if choice == 1:
        main()
    elif choice == 2:
        reversal()
    else:
        print("You had one simple job and you screwed it up ")

options()
